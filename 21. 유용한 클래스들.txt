1. Object 클래스
    1) 모든 클래스의 최상위 클래스
        - 모든 클래스는 Object 클래스를 상속 받는다
        - 컴파일러가 extends Object를 추가한다
    2) java.lang 패키지
        - 프로그래밍 import 하지 않아도 자동으로 import
        - 많이 사용하는 기본 클래스들이 속한 패키지
        - Object, String, System .....
    3) toString() 메서드
        - 객체의 정보를 String으로 바꾸어서 사용할 때 쓰인다
        - String, Integer..... 클래스는 이미 재정의(override) 되어 있다
        - 많은 클래스에서 재정의해서 사용한다
    4) equals() 메서드
        - 두 인스턴스의 주소 값을 비교하여 true/false 반환
        - 재정의하여 두 인스턴스가 논리적으로 동일함의 여부를 구현한다
        - 인스턴스가 다르더라도 논리적으로 동일한 경우 true를 반환하도록 재정의를 할 수 있다
    5) hashCode() 메서드
        - hashCode()는 인스턴스의 저장 주소를 반환한다
        - 힙 메모리에 인스턴스가 저장되는 방식 hash 방식이다
            - hash : 정보를 저장, 검색하는 자료구조이다
            - 자료의 특정 값(키 값)에 대한 저장 위치를 반환해주는 해시 함수이다
    6) Clone() 메서드
        - 객체의 원본을 복제하는데 사용하는 메서드
        - 객체의 정보(맴버 변수의 값)가 동일한 또 다른 인스터느가 생성되는 것이다
            - 정보 은닉, 객체 보호 관점에서는 위배
        - 해딩 클래스의 clone() 메서드의 사용을 허용한다는 의미로 Cloneable 인터페이스 명시한다

 2. String 클레스 
    1) String 선언하기
    - 힙 메모리에 인스턴스로 생성되는 경우 / 상수 풀(constant pool)에 있는 주소를 참조하는 두가지 방법이다.
    - 힙 메모리는 생성될 때마다 다른 주소 값을 가지지만, 상수 풀에 문자열은 모두 같은 주소 값을 가진다.
    
    2) 한번 생성된 String은 불변(immutable)
        - String를 연결하면 기존의 String에 연결되는 것이 아니고
          새로운 문자열이 생성됨 (메모리 낭비가 발생할 수도 있다)

3. StringBuilder, StringBuffer
    1) 내부적으로 가변적인 char[]를 멤버 변수로 가진다
    2) 새로운 문자열을 여러번 연결하거나 변경할 때 사용하면 유용하다
    3) 새로운 인스턴스를 생성하지 않고 char[]를 변경한다
    4) StringBuffer는 멀티 쓰레드 프로그래밍에서 동기화(Synchronization)를 보장한다
    5) 단일 스레드 프로그램에서는 StringBuilder 사용을 권장한다

4. Text Block
    1) 문자열을 """ """ 사이에 이어서 만들 수 있다
    2) html, json 문자열을 만드는 데 유용하게 사용할 수 있다    

5. Class 클래스
    1) 자바의 모든 클래스와 인터페이스는 컴파일 후 class 파일이 생성된다.
    2) Class 클래스
        - 컴파일 된 Class 파일을 로드하여 객체를 동적 로드하고, 장보를 가져오는 메서드가 제공된다.
            - class 파일에는 객체의 정보가 포함되어 있음 (멤버 변수, 메서드, 생성자 등)
    
    - Class 클래스 가져오기
        - 생성된 인스턴스에서 Class 클래스 가져오기
        - 예) String str = new String();
              Class class = str.getClass();

        - 클래스 이름으로 직접 Class 클래스 가져오기
            - 예) Class class = String.class;
        
        - Class.forName("클래스 이름") 메서드로 클래스를 동적으로 로드 할 수 있다
            - 예) Class class = Class.forName("java.lang.String")
    - newInstance() 메서드
        - new 키워드를 사용하지 않고 인스턴스를 생성할 수 있다

    3) reflection 프로그래밍
        - Class 클래스로부터 객체의 정보를 가져와 프로그래밍을 하는 방식이다.
        - 로컬에 객체가 없고 자료형을 알 수 없는 경우 유용한 프로그래밍
        - java.lang.reflect 패키지에 있는 클래스 활용

