1. 다형성(polymorphism)
    1) 하나의 코드가 여러 자료형으로 구현 되어 실행되는 것
    2) 같은 코드에서 여러 실행 결과가 나온다
    3) 정보 은닉, 상속과 더불어 OOP의 가장 큰 특징 중 하나이다
    4) 다형성을 잘 활용하면 유연하고 확장성 있고 유지보수가 편리한 프로그램을 만들 수 있다
    

2. 다형성을 사용하는 이유(장점)
    1) 다른 동물을 추가하는 경우
    2) 상속과 메서드 재정의를 활용하여 확장성 있는 프로그램을 만들 수 있다
    3) 다형성이 적용되지 않는 경우엔 if ~ else if 문이 구현되고 코드의 유지 보수가 어려워진다
    4) 상위 클래스에서는 공통적인 부분을 제공하고 하위 클래스에서는 각 클래스에 맞는 기능 구현한다
    5) 여러 클래스를 하나의 타입(상위 클래스)으로 핸들링을 할 수 있다
    
3. 다형성으로 인한 형 변환(캐스팅)
    1) 형 변환의 전제 조건 -- 상속(inheritance)관계에 ㅇ있는 것만 객체 타입 변환이 가능하다
    2) Up-Casting
        - 자손 타입에서 조상 타입으로 형 변환, 형 변환 생략이 가능하다(조상 타입을 자손 타입이 다 가지고 있기 때문에), 묵시적이다
            => 조작 맴버변수가 줄어든다
    3) Down-Casting
        - Up-Casting된 클래스를 다시 원래의 타입으로 형 변환 하는 것이다
            - 하위 클래스로의 형 변환은 며시적으로 해야한다
                - 예) Customer customerK = new VIPCustomer(); // UP-Casting(묵시적)
                      VIPCustomer customerV = (VIPCustomer)new customerK    // Down-Casting(명시적) 참조 변수명 다르게 하고, 캐스팅을 꼭 해줘야한다
        
        - instanceOf 연산자
            - 인스턴스의 형(Type) 체크
            - 원래 인스턴스의 형(Type)이 맞는지 여부 체크를 하는 키워드이다 
                - 맞으면 true, 아니면 false를 반환한다
